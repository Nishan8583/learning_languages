use std::time::Duration;

use tracing_subscriber::fmt::format::FmtSpan;
use tokio;

// this wraps the function inside a span
#[tracing::instrument]
async fn hello_world() {
    println!("Hello world");
    tokio::time::sleep(Duration::from_secs(1)).await;
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {

    // subscriber that consumes the logs generated by tracing
    //let subscriber = tracing_subscriber::FmtSubscriber::new();
    let subscriber = tracing_subscriber::fmt()
    .compact()
    .with_file(true)
    .with_line_number(true)
    .with_thread_ids(true)
    .with_target(true)
    .with_span_events(FmtSpan::ENTER | FmtSpan::EXIT | FmtSpan::CLOSE)  // trace log of enter a span and exiting a span , close is when finishing
    .finish();

    tracing::subscriber::set_global_default(subscriber)?;

    tracing::info!("Starting up");
    tracing::warn!("Are you sure this is a good idea ?");
    tracing::error!("Something went horribly wrong");

    hello_world().await;
    Ok(())
}

// close time.busy=689Âµs time.idle=1.01s
// with idle time we can see the function is waiting for something, good for benchmarking
